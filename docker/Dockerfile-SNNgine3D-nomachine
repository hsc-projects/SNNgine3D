# Sources:
# https://github.com/rewreu/nomachine
# https://github.com/iot-salzburg/gpu-jupyter
# https://stackoverflow.com/questions/53835198/integrating-python-poetry-with-docker/54763270#54763270

ARG FROM_TAG=main
FROM  hscprojects/snngine3d-nomachine-base:$FROM_TAG

# --------------------------------------
# ------------- Set labels -------------

# See https://github.com/opencontainers/image-spec/blob/master/annotations.md
LABEL name="snngine3d-nomachine"
LABEL version="0.0.0"
LABEL vendor="hsc-projects"
LABEL org.opencontainers.image.title="snngine3d-nomachine"
LABEL org.opencontainers.image.version="0.0.0"
LABEL org.opencontainers.image.url="https://github.com/hsc-projects/snngine3d"
LABEL org.opencontainers.image.documentation="https://github.com/hsc-projects/snngine3d"
LABEL authors="hsc-projects <hsc-projects@protonmail.com>"
LABEL maintainer="hsc-projects <hsc-projects@protonmail.com>"

ARG tz=Europe/Amsterdam
ARG SNNGINE3D_INSTALL_OPTIONS="--without dev"


ENV TZ=$tz

# ENV CONDA_DIR                       "/opt/conda"
ENV PYTHONFAULTHANDLER              1
ENV PYTHONUNBUFFERED                1
ENV PYTHONHASHSEED                  random
ENV PIP_NO_CACHE_DIR                off
ENV PIP_DISABLE_PIP_VERSION_CHECK   on
ENV PIP_DEFAULT_TIMEOUT             120

ENV PYTHON_VERSION  3.10
ENV POETRY_VERSION  1.3.2
ENV PYCUDA_VERSION  v2022.2
ENV TORCH_VERSION   1.13.1

ENV SNNGINE3D_DIR   "/opt/snngine3d"

COPY --chown="${USER}:${GID}" /docker/initial-condarc "${CONDA_DIR}/.condarc"

RUN su ${USER} && \
    cd "/home/${USER}/tmp"&& \
    set -x && \
    arch=$(uname -m) && \
    # Should be simpler, see <https://github.com/mamba-org/mamba/issues/1437>
    if [ "${arch}" = "x86_64" ]; then arch="64"; fi && \
    wget -qO /tmp/micromamba.tar.bz2 \
        "https://micromamba.snakepit.net/api/micromamba/linux-${arch}/latest" && \
    tar -xvjf /tmp/micromamba.tar.bz2 --strip-components=1 bin/micromamba && \
    rm /tmp/micromamba.tar.bz2 && \
    PYTHON_SPECIFIER="python=${PYTHON_VERSION}" && \
    if [ "${PYTHON_VERSION}" = "default" ]; then PYTHON_SPECIFIER="python"; fi && \
    # Install the packages
    ./micromamba install  \
        --root-prefix="${CONDA_DIR}" --prefix="${CONDA_DIR}" -y "${PYTHON_SPECIFIER}"  \
      'mamba'  \
      'notebook' \
      'jupyterhub' \
      'jupyterlab' && \
    rm micromamba && \
    # Pin major.minor version of python \
    mamba list python | grep '^python ' | tr -s ' ' | cut -d ' ' -f 1,2 >> "${CONDA_DIR}/conda-meta/pinned" && \
    jupyter notebook --generate-config && \
    npm cache clean --force && \
    rm -rf "/home/${USER}/.cache/yarn" && \
    mamba install --quiet --yes \
        'bokeh' \
        'ipywidgets' \
        'matplotlib-base' \
        'plotly' \
        'seaborn' \
        'widgetsnbextension' && \
    #    set -ex buildDeps='graphviz==0.19.1' && \
    pip install --no-cache-dir graphviz && \
    pip install --no-cache-dir jupyterlab-drawio && \
    jupyter labextension install jupyterlab-plotly && \
    jupyter labextension install @jupyter-widgets/jupyterlab-manager plotlywidget && \
    pip install --no-cache-dir jupyter_contrib_nbextensions jupyter_nbextensions_configurator && \
    jupyter labextension install @ijmbarr/jupyterlab_spellchecker && \
    jupyter lab clean && \
    conda init bash && \
    pip install --no-cache-dir jupyter_rfb "poetry==$POETRY_VERSION" && \
    mamba clean --all -f -y && \
    fix-permissions "/home/${USER}" && fix-permissions "${CONDA_DIR}"

RUN pip install --no-cache-dir torch==$TORCH_VERSION --extra-index-url https://download.pytorch.org/whl/cu116 && \
    # Clone PyCUDA (we need to enable Cuda-OpenGl-Interoperability before the installation)
    cd "/home/${USER}/tmp/" && \
    git clone https://github.com/inducer/pycuda.git && cd pycuda && \
    git fetch --all --tags && git checkout tags/$PYCUDA_VERSION && \
    git submodule update --init && \
    python ./configure.py --cuda-root=/usr/local/cuda --cuda-enable-gl && \
    su -c "make install" && \
    cp -r ./test "/home/${USER}/pycuda_test/" && \
    cd ~ && rm -rf "/home/${USER}/tmp/" && \
    mamba clean --all -f -y && \
    conda clean --all -f -y && \
    fix-permissions "/home/${USER}" && fix-permissions "${CONDA_DIR}"

COPY ./poetry.lock ./pyproject.toml ./README.md $SNNGINE3D_DIR/
COPY ./snngine3d $SNNGINE3D_DIR/snngine3d
COPY --chown="${UID}:${GID}" /notebooks "/home/${USER}/notebooks"
#COPY --chown="${UID}:${GID}" /examples "/home/${USER}/examples"

# Install with poetry
# pip install would probably work, too, but we'd have to make sure it's a recent enough pip
# Don't bother creating a virtual env -- significant performance increase
RUN cd "${SNNGINE3D_DIR}" && \
    poetry config virtualenvs.create false &&  \
    poetry install --no-interaction --no-ansi $SNNGINE3D_INSTALL_OPTIONS &&  \
    fix-permissions "/home/${USER}" && fix-permissions "${CONDA_DIR}" && fix-permissions "${SNNGINE3D_DIR}"


RUN cp /opt/conda/lib/libstdc++.so.6.0.30 /usr/lib/x86_64-linux-gnu/ && \
    sudo rm /usr/lib/x86_64-linux-gnu/libstdc++.so.6 && \
    sudo ln -s /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30 /usr/lib/x86_64-linux-gnu/libstdc++.so.6

# Run it
#EXPOSE 22 4000
#ENTRYPOINT ["nxserver"]

ARG PYCHARM_COM_VERSION=2022.3.1

RUN wget -c "https://download-cf.jetbrains.com/python/pycharm-community-${PYCHARM_COM_VERSION}.tar.gz" -nv -O - | tar -xz -C /opt/ && \
    ln -s "/opt/pycharm-community-${PYCHARM_COM_VERSION}/bin/pycharm.sh" /usr/bin/pycharm


# docker run -d -p 4001:4000 --name nomachine0 --gpus all --cap-add=SYS_PTRACE hscprojects/snngine3d-nomachine:main
